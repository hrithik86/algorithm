//Prim's Algo to find MST
/*
I/P:
4 4
0 1 3
0 3 5
1 2 1
2 3 8

O/P:
0 1 3
1 2 1
0 3 5

*/
#include <bits/stdc++.h>
using namespace std;

int getVertex(bool *visited,int *weight,int n){
    int minVertex=-1;
    for(int i=0;i<n;i++){
        if((!visited[i] && (minVertex==-1)) || (weight[i]<weight[minVertex]))
            minVertex=i;
    }
    return minVertex;
}

void prims(int **edges,int n){
    int *parent=new int[n];
    int *weight=new int[n];
    bool *visited=new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
        weight[i]=INT_MAX;
    }
    parent[0]=-1;
    for(int i=0;i<n-1;i++){
        
        //Get minVertex i.e, unvisited vertex with minimum weight
        int minVertex=getVertex(visited,weight,n);
        visited[minVertex]=true;
        
        //Explore all the neighbours of minVertex and update parent and weight array according to that
        for(int j=0;j<n;j++){
            if(edges[minVertex][j]!=0 && !visited[j]){
                if(weight[j]>edges[minVertex][j]){
                    weight[j]=edges[minVertex][j];
                    parent[j]=minVertex;
                }
            }
        }
    }
    for(int i=1;i<n;i++){
        if(parent[i]<i)
            cout<<parent[i]<<" "<<i<<" "<<weight[i]<<endl;
        else 
            cout<<i<<" "<<parent[i]<<" "<<weight[i]<<endl;
    }
    delete[] parent;
    delete[] visited;
    delete[] weight;
    return;
}

int main()
{   
    int n,e;
    cin>>n>>e;
    
    //Making adjacency matrix for graph
    //2d array dynamic allocation
    int **edges=new int*[n];
    for(int i=0;i<n;i++){
        edges[i]=new int[n];
    }
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            edges[i][j]=0;
        }
    }
    
    int f,s,wt;
    for(int i=0;i<e;i++){
        cin>>f>>s>>wt;
        edges[f][s]=wt;
        edges[s][f]=wt;
    }
    
    cout<<endl;
    prims(edges,n);
    
    for(int i=0;i<n;i++){
        delete [] edges[i];
    }
    delete [] edges;
    return 0;
}
