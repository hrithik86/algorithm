//Minimum coins needed problem
#include <bits/stdc++.h>
using namespace std;
//=================================RECURSION=====================================
int coinsNeeded(int coins[],int amount,int n){
    if(amount==0){
        return 0;
    }
    int ans=INT_MAX;
    for(int i=0;i<n;i++){
        if(amount-coins[i]>=0){
            int smallerAns=coinsNeeded(coins,amount-coins[i],n);    
            if(smallerAns!=INT_MAX){
                ans=min(ans,smallerAns+1);
            }
        }
    }
    return ans;
}
//================================================================================


//==============================DP================================================
int coinsNeededDP(int coins[],int amount,int n){
    int *dp=new int[amount+1];
    dp[0]=0;
    for(int rupay=1;rupay<=amount;rupay++){
        dp[rupay]=INT_MAX;
        for(int j=0;j<n;j++){
            if(rupay-coins[j]>=0){
                int smallerAns=dp[rupay-coins[j]];
                if(smallerAns!=INT_MAX){
                    dp[rupay]=min(dp[rupay],smallerAns+1);
                }
            }
        }
    }
    return dp[amount];
}
//================================================================================

int main()
{
    int us_coins[]={1,7,10};
    int n=3;
    int amount=15;
    
    int ind_coins[]={1,2,5,10,50};
    int m=5;
    int paise=13;
    
    cout<<coinsNeeded(us_coins,amount,n)<<endl;
    cout<<coinsNeeded(ind_coins,paise,m)<<endl;
    cout<<"Using DP:\n";
    cout<<coinsNeededDP(us_coins,amount,n)<<endl;
    cout<<coinsNeededDP(ind_coins,39,m)<<endl;

    return 0;
}
